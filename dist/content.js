/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./content.js":
/*!********************!*\
  !*** ./content.js ***!
  \********************/
/***/ (() => {

eval("// Create and inject the sidebar iframe\nlet sidebarFrame = null;\nlet sidebarVisible = false;\nlet shadowRoot = null;\nlet docsObserver = null;\nlet genericObserver = null;\nlet layoutDebounceTimer = null;\n\n// Initialize the content script\nconsole.log('Content script initialized');\n\n// Cleanup function for observers and elements\nfunction cleanup() {\n  if (docsObserver) {\n    docsObserver.disconnect();\n    docsObserver = null;\n  }\n  if (genericObserver) {\n    genericObserver.disconnect();\n    genericObserver = null;\n  }\n  if (shadowRoot) {\n    shadowRoot.host.remove();\n    shadowRoot = null;\n  }\n  if (sidebarFrame) {\n    sidebarFrame = null;\n  }\n  sidebarVisible = false;\n}\n\n// Debounce function to prevent rapid layout adjustments\nfunction debounce(func, wait) {\n  return function executedFunction(...args) {\n    const later = () => {\n      layoutDebounceTimer = null;\n      func(...args);\n    };\n    clearTimeout(layoutDebounceTimer);\n    layoutDebounceTimer = setTimeout(later, wait);\n  };\n}\n\nfunction createShadowContainer() {\n  const container = document.createElement('div');\n  container.id = 'cognito-container';\n  shadowRoot = container.attachShadow({ mode: 'open' });\n  document.body.appendChild(container);\n  return shadowRoot;\n}\n\nfunction createSidebar() {\n  if (sidebarFrame) {\n    console.log('Sidebar already exists');\n    return;\n  }\n  \n  console.log('Creating sidebar iframe');\n  \n  // Create shadow DOM if it doesn't exist\n  if (!shadowRoot) {\n    shadowRoot = createShadowContainer();\n  }\n\n  sidebarVisible = false;  // Start with sidebar hidden\n\n  // Create styles for shadow DOM\n  const style = document.createElement('style');\n  style.textContent = `\n    .cognito-sidebar {\n      position: fixed;\n      top: 0;\n      right: 0;\n      width: 350px;\n      height: 100vh;\n      background: white;\n      box-shadow: -2px 0 8px rgba(0, 0, 0, 0.1);\n      z-index: 2147483647;\n      transition: transform 0.3s ease;\n      user-select: none;\n      -webkit-user-select: none;\n      pointer-events: auto;\n      transform: translateX(350px);  // Start hidden\n    }\n    .cognito-content-shift {\n      transition: margin-right 0.3s ease, width 0.3s ease;\n    }\n  `;\n  shadowRoot.appendChild(style);\n\n  // Create sidebar container\n  const sidebarContainer = document.createElement('div');\n  sidebarContainer.className = 'cognito-sidebar';\n  \n  // Create and setup iframe\n  sidebarFrame = document.createElement('iframe');\n  sidebarFrame.src = chrome.runtime.getURL('sidebar.html');\n  sidebarFrame.style.cssText = `\n    width: 100%;\n    height: 100%;\n    border: none;\n    background: white;\n  `;\n  \n  sidebarContainer.appendChild(sidebarFrame);\n  shadowRoot.appendChild(sidebarContainer);\n  \n  console.log('Sidebar iframe created and appended');\n\n  // Add class to body for content shifting\n  document.body.classList.add('cognito-content-shift');\n  \n  // Setup observers for layout adjustment\n  setupDocsObserver();\n  setupGenericObserver();\n}\n\nfunction setupDocsObserver() {\n  if (docsObserver) {\n    docsObserver.disconnect();\n  }\n\n  // Create a one-time observer to wait for the editor to load\n  docsObserver = new MutationObserver((mutations, obs) => {\n    const docsContainer = document.querySelector('.kix-appview-editor');\n    if (docsContainer) {\n      obs.disconnect();\n      \n      // Set up the actual observer for layout changes\n      docsObserver = new MutationObserver(debounce(() => {\n        if (document.querySelector('.kix-appview-editor')) {\n          adjustDocsLayout();\n        }\n      }, 100));\n\n      docsObserver.observe(document.body, {\n        childList: true,\n        subtree: true,\n        attributes: true,\n        attributeFilter: ['style', 'class']\n      });\n    }\n  });\n\n  docsObserver.observe(document.body, { childList: true, subtree: true });\n}\n\nfunction setupGenericObserver() {\n  if (genericObserver) {\n    genericObserver.disconnect();\n  }\n\n  // Add margin to body or main container\n  const mainContainer = document.querySelector('main') || document.querySelector('#main') || document.body;\n  if (mainContainer) {\n    mainContainer.style.transition = 'margin-right 0.3s ease';\n  }\n\n  // Create observer for dynamic content\n  genericObserver = new MutationObserver(debounce(() => {\n    if (sidebarVisible) {\n      adjustGenericLayout();\n    }\n  }, 100));\n\n  genericObserver.observe(document.body, {\n    childList: true,\n    subtree: true,\n    attributes: true,\n    attributeFilter: ['style', 'class']\n  });\n}\n\nfunction adjustDocsLayout() {\n  // Main content containers that need margin and width adjustment\n  const mainContainers = [\n    '.kix-appview-editor',\n    '.docs-toolbar-wrapper',\n    '.docs-titlebar-badges',\n    '.docs-horizontal-ruler',\n    '.docs-menubar',\n    '.docs-header'\n  ];\n\n  const margin = sidebarVisible ? '350px' : '0';\n  \n  // Adjust main content containers\n  mainContainers.forEach(selector => {\n    const element = document.querySelector(selector);\n    if (element) {\n      element.style.marginRight = margin;\n      element.style.width = sidebarVisible ? `calc(100% - ${margin})` : '100%';\n      element.style.transition = 'all 0.3s ease';\n    }\n  });\n\n  // Handle the document page container specifically\n  const pageContainer = document.querySelector('.kix-page');\n  if (pageContainer) {\n    pageContainer.style.marginRight = margin;\n    pageContainer.style.transition = 'margin 0.3s ease';\n  }\n\n  // Adjust Google Docs side panel container\n  const sidePanelContainer = document.querySelector('.companion-app-switcher-container');\n  if (sidePanelContainer) {\n    if (sidebarVisible) {\n      sidePanelContainer.style.right = margin;\n      sidePanelContainer.style.width = 'var(--companion-app-switcher-width)';\n    } else {\n      sidePanelContainer.style.right = '0';\n      sidePanelContainer.style.width = '';\n    }\n    sidePanelContainer.style.transition = 'right 0.3s ease';\n  }\n\n  // Handle responsive UI elements\n  if (sidebarVisible) {\n    // Add compact mode class to body\n    document.body.classList.add('docs-size-compact');\n    \n    // Adjust share button to compact mode\n    const shareButtonText = document.querySelector('.docs-share-button-label');\n    if (shareButtonText) {\n      shareButtonText.style.display = 'none';\n    }\n\n    // Make menu bar more compact\n    const menuBar = document.querySelector('.docs-menubar');\n    if (menuBar) {\n      // Adjust menu bar container\n      menuBar.style.padding = '0 4px';\n      \n      // Adjust individual menu items\n      const menuItems = menuBar.querySelectorAll('.goog-menu-button, .docs-menu-button');\n      menuItems.forEach(item => {\n        item.style.padding = '0 3px';\n        item.style.minWidth = '20px';\n        // Hide menu item text, keep only first letter\n        const menuText = item.querySelector('.goog-menu-button-caption, .docs-menu-button-label');\n        if (menuText) {\n          const text = menuText.textContent;\n          if (text && text.length > 1) {\n            menuText.setAttribute('data-full-text', text);\n            menuText.textContent = text[0];\n          }\n        }\n      });\n    }\n\n    // Adjust toolbar buttons to be more compact\n    const toolbarButtons = document.querySelectorAll('.goog-toolbar-button, .docs-toolbar-button');\n    toolbarButtons.forEach(button => {\n      button.style.padding = '0 4px';\n      button.style.margin = '0 1px';\n    });\n\n    // Make header more compact\n    const header = document.querySelector('.docs-titlebar-buttons');\n    if (header) {\n      header.style.gap = '4px';\n      header.style.padding = '0 8px';\n    }\n\n    // Handle side panel toggle button\n    const sidePanelToggle = document.querySelector('.companion-collapser-button-container');\n    if (sidePanelToggle) {\n      sidePanelToggle.style.right = margin;\n      sidePanelToggle.style.transition = 'right 0.3s ease';\n    }\n\n  } else {\n    // Remove compact mode\n    document.body.classList.remove('docs-size-compact');\n    \n    // Restore share button text\n    const shareButtonText = document.querySelector('.docs-share-button-label');\n    if (shareButtonText) {\n      shareButtonText.style.display = '';\n    }\n\n    // Restore menu bar\n    const menuBar = document.querySelector('.docs-menubar');\n    if (menuBar) {\n      // Restore menu bar container\n      menuBar.style.padding = '';\n      \n      // Restore menu items\n      const menuItems = menuBar.querySelectorAll('.goog-menu-button, .docs-menu-button');\n      menuItems.forEach(item => {\n        item.style.padding = '';\n        item.style.minWidth = '';\n        // Restore menu item text\n        const menuText = item.querySelector('.goog-menu-button-caption, .docs-menu-button-label');\n        if (menuText && menuText.hasAttribute('data-full-text')) {\n          menuText.textContent = menuText.getAttribute('data-full-text');\n          menuText.removeAttribute('data-full-text');\n        }\n      });\n    }\n\n    // Restore toolbar buttons\n    const toolbarButtons = document.querySelectorAll('.goog-toolbar-button, .docs-toolbar-button');\n    toolbarButtons.forEach(button => {\n      button.style.padding = '';\n      button.style.margin = '';\n    });\n\n    // Restore header\n    const header = document.querySelector('.docs-titlebar-buttons');\n    if (header) {\n      header.style.gap = '';\n      header.style.padding = '';\n    }\n\n    // Restore side panel toggle button\n    const sidePanelToggle = document.querySelector('.companion-collapser-button-container');\n    if (sidePanelToggle) {\n      sidePanelToggle.style.right = '0';\n    }\n  }\n\n  // Also adjust generic layout\n  adjustGenericLayout();\n}\n\nfunction adjustGenericLayout() {\n  const mainContainer = document.querySelector('main') || document.querySelector('#main') || document.body;\n  const margin = sidebarVisible ? '350px' : '0';\n  \n  if (mainContainer) {\n    mainContainer.style.marginRight = margin;\n    mainContainer.style.width = sidebarVisible ? `calc(100% - ${margin})` : '100%';\n  }\n}\n\nfunction toggleSidebar(activeTab = null) {\n  console.log('Toggling sidebar, activeTab:', activeTab);\n  \n  if (!sidebarFrame) {\n    console.log('No sidebar frame found, creating one');\n    createSidebar();\n  }\n\n  sidebarVisible = !sidebarVisible;\n  console.log('Setting sidebar visibility:', sidebarVisible);\n  \n  // Animate sidebar\n  const sidebarContainer = shadowRoot.querySelector('.cognito-sidebar');\n  if (sidebarContainer) {\n    sidebarContainer.style.transform = sidebarVisible ? 'none' : 'translateX(350px)';\n  }\n\n  // Adjust Google Docs layout\n  adjustDocsLayout();\n\n  if (activeTab && sidebarVisible) {\n    console.log('Switching to tab:', activeTab);\n    setTimeout(() => {\n      if (sidebarFrame && sidebarFrame.contentWindow) {\n        sidebarFrame.contentWindow.postMessage({ action: 'switchTab', tab: activeTab }, '*');\n        console.log('Tab switch message sent');\n      } else {\n        console.error('Sidebar frame or contentWindow not available');\n      }\n    }, 300);\n  }\n}\n\n// Listen for extension unload/reload\nwindow.addEventListener('beforeunload', cleanup);\n\n// Handle extension reload\nchrome.runtime.onMessage.addListener((request, sender, sendResponse) => {\n  console.log('Content script received message:', request);\n  \n  if (request.action === 'toggleSidebar') {\n    console.log('Handling toggleSidebar action');\n    // Clean up existing instances before creating new ones\n    cleanup();\n    toggleSidebar(request.tab);\n    sendResponse({ success: true });\n  } else {\n    console.log('Unknown action:', request.action);\n    sendResponse({ success: false, error: 'Unknown action' });\n  }\n  \n  return true; // Keep the message channel open for async response\n});\n\n// Listen for messages from the sidebar iframe\nwindow.addEventListener('message', (event) => {\n  // Make sure the message is from our sidebar\n  if (event.source !== sidebarFrame?.contentWindow) return;\n\n  const { action, data } = event.data;\n\n  switch (action) {\n    case 'closeSidebar':\n      toggleSidebar();\n      break;\n    case 'uploadFiles':\n      handleFileUpload(data.files);\n      break;\n    case 'applyOutline':\n      applyOutlineToDoc(data.outline, data.cursor_position);\n      break;\n    case 'getCursorPosition':\n      const position = getCursorPosition();\n      sidebarFrame.contentWindow.postMessage({\n        action: 'cursorPosition',\n        position: position\n      }, '*');\n      break;\n  }\n});\n\n// Function to handle file uploads\nasync function handleFileUpload(files) {\n  console.log('Starting file upload');\n  const formData = new FormData();\n  files.forEach(file => formData.append('files', file));\n\n  try {\n    const response = await fetch('http://localhost:5000/api/upload', {\n      method: 'POST',\n      body: formData\n    });\n    \n    const result = await response.json();\n    console.log('Upload successful:', result);\n    sidebarFrame.contentWindow.postMessage({\n      action: 'uploadComplete',\n      success: true,\n      data: result\n    }, '*');\n  } catch (error) {\n    console.error('Upload failed:', error);\n    sidebarFrame.contentWindow.postMessage({\n      action: 'uploadComplete',\n      success: false,\n      error: error.message\n    }, '*');\n  }\n}\n\n// Function to get cursor position in Google Doc\nfunction getCursorPosition() {\n  const selection = window.getSelection();\n  if (!selection.rangeCount) return null;\n\n  const range = selection.getRangeAt(0);\n  const rect = range.getBoundingClientRect();\n  \n  return {\n    x: rect.left,\n    y: rect.top,\n    node: range.startContainer,\n    offset: range.startOffset\n  };\n}\n\n// Function to apply the generated outline to the Google Doc\nfunction applyOutlineToDoc(outline, cursorPosition) {\n  const doc = document.querySelector('div[contenteditable=\"true\"]');\n  if (!doc) return;\n\n  // Create outline text\n  const outlineText = outline.sections.map((section, index) => {\n    const keyPoints = section.key_points.map((point, i) => `  ${i + 1}. ${point}`).join('\\n');\n    return `${index + 1}. ${section.title}\\n${keyPoints}`;\n  }).join('\\n\\n');\n  \n  // Create a new div with the outline\n  const outlineElement = document.createElement('div');\n  outlineElement.textContent = outlineText;\n  \n  if (cursorPosition && cursorPosition.node) {\n    // Insert at cursor position\n    const range = document.createRange();\n    range.setStart(cursorPosition.node, cursorPosition.offset);\n    range.insertNode(outlineElement);\n  } else {\n    // Insert at the beginning\n    doc.insertBefore(outlineElement, doc.firstChild);\n  }\n} \n\n//# sourceURL=webpack://cognito-extension/./content.js?");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__["./content.js"]();
/******/ 	
/******/ })()
;