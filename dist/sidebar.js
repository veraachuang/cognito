/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./sidebar.js":
/*!********************!*\
  !*** ./sidebar.js ***!
  \********************/
/***/ (() => {

eval("// sidebar.js\n\nconsole.log('[Cognito] Sidebar script loaded');\n\nwindow.parent.postMessage({ action: 'sidebarReady' }, '*');\n\nconst closeBtn = document.getElementById('close-sidebar');\nconst tabButtons = document.querySelectorAll('.tab-button');\nconst tabPanels = document.querySelectorAll('.tab-panel');\nconst braindumpInput = document.getElementById('braindump-input');\n\nfunction switchTab(tabId) {\n  tabButtons.forEach(btn => btn.classList.toggle('active', btn.dataset.tab === tabId));\n  tabPanels.forEach(panel => panel.classList.toggle('active', panel.id === tabId));\n\n  if (tabId === 'braindump') {\n    const text = braindumpInput.value;\n    analyzeText(text);\n  }\n}\n\n\n\ncloseBtn.addEventListener('click', () => {\n  window.parent.postMessage({ action: 'closeSidebar' }, '*');\n});\n\ntabButtons.forEach(button => {\n  button.addEventListener('click', () => {\n    const tabId = button.dataset.tab;\n    switchTab(tabId);\n  });\n});\n\nwindow.addEventListener('message', (event) => {\n  const { action, data, features } = event.data;\n\n  if (action === 'liveTextUpdate') {\n    // Only update the analysis tab with live Google Doc text\n    updateAnalysisTab(data);\n  \n    if (features) {\n      document.getElementById('word-count').textContent = features.wordCount;\n      document.getElementById('reading-time').textContent = features.readingTime;\n    }\n  \n    localStorage.setItem('lastWritingUpdate', Date.now());\n  }\n  \n  \n});\n\n\nbraindumpInput.addEventListener('input', (e) => {\n  const text = e.target.value;\n  analyzeText(text);\n  localStorage.setItem('lastWritingUpdate', Date.now());\n});\n\nfunction analyzeText(text) {\n  const wordCount = text.trim().split(/\\s+/).length;\n  const readingTime = Math.ceil(wordCount / 200);\n  const gradeLevel = calculateGradeLevel(text);\n  const writingStyle = analyzeWritingStyle(text);\n\n  document.getElementById('word-count').textContent = wordCount;\n  document.getElementById('reading-time').textContent = `${readingTime} min`;\n  document.getElementById('grade-level').textContent = gradeLevel;\n  document.getElementById('writing-style').textContent = writingStyle;\n\n  if (isWriterStuck(text)) generateWritingPrompts(text);\n}\n\nfunction calculateGradeLevel(text) {\n  const words = text.trim().split(/\\s+/);\n  const sentences = text.split(/[.!?]+/).filter(s => s.trim().length > 0);\n  const syllables = countSyllables(text);\n\n  const wordsPerSentence = words.length / Math.max(1, sentences.length);\n  const syllablesPerWord = syllables / Math.max(1, words.length);\n\n  const gradeLevel = 0.39 * wordsPerSentence + 11.8 * syllablesPerWord - 15.59;\n  return Math.round(gradeLevel);\n}\n\nfunction countSyllables(text) {\n  const words = text.trim().toLowerCase().split(/\\s+/);\n  let count = 0;\n  words.forEach(word => {\n    word = word.replace(/[^a-z]/g, '');\n    if (word.length <= 3) {\n      count += 1;\n      return;\n    }\n    count += word.replace(/[^aeiouy]+/g, ' ').trim().split(/\\s+/).length;\n  });\n  return count;\n}\n\nfunction analyzeWritingStyle(text) {\n  const words = text.trim().split(/\\s+/);\n  const sentences = text.split(/[.!?]+/).filter(s => s.trim().length > 0);\n\n  const avgWordLength = words.reduce((sum, w) => sum + w.length, 0) / words.length;\n  const avgSentenceLength = words.length / Math.max(1, sentences.length);\n\n  if (avgWordLength > 5 && avgSentenceLength > 20) return 'Academic';\n  else if (avgWordLength < 4 && avgSentenceLength < 15) return 'Conversational';\n  else return 'Balanced';\n}\n\nfunction isWriterStuck(text) {\n  const words = text.trim().split(/\\s+/);\n  const lastWords = words.slice(-10);\n  const uniqueWords = new Set(lastWords);\n  if (uniqueWords.size < 5) return true;\n\n  const lastUpdate = localStorage.getItem('lastWritingUpdate');\n  if (lastUpdate && Date.now() - lastUpdate > 30000) return true;\n\n  return false;\n}\n\nfunction generateWritingPrompts(text) {\n  const promptsContainer = document.getElementById('prompts-container');\n  promptsContainer.innerHTML = '';\n\n  const prompts = [\n    'What is the main point you want to convey?',\n    'How does this connect to your previous ideas?',\n    'Can you provide an example to illustrate this?',\n    'What would someone who disagrees with you say?',\n    'How does this relate to your overall topic?'\n  ];\n\n  prompts.forEach(prompt => {\n    const promptElement = document.createElement('div');\n    promptElement.className = 'prompt';\n    promptElement.textContent = prompt;\n    promptElement.onclick = () => {\n      braindumpInput.value += '\\n\\n' + prompt;\n      braindumpInput.focus();\n    };\n    promptsContainer.appendChild(promptElement);\n  });\n}\n\nfunction updateAnalysisTab(text) {\n  const words = text.trim().split(/\\s+/).filter(Boolean);\n  const longWords = words.filter(w => w.length > 7);\n  const sentences = text.split(/[.!?]+/).filter(s => s.trim().length > 0);\n\n  const vocabRatio = longWords.length / Math.max(1, words.length);\n  const vocabLevel = vocabRatio > 0.2 ? 'Advanced' : vocabRatio > 0.1 ? 'Moderate' : 'Basic';\n\n  const avgSentenceLength = words.length / Math.max(1, sentences.length);\n  const sentenceStructure = avgSentenceLength > 20 ? 'Complex' :\n                            avgSentenceLength > 12 ? 'Varied' : 'Simple';\n\n  const clarityScore = Math.max(50, Math.min(100, 120 - avgSentenceLength * 2));\n\n  const vividWords = ['exciting', 'surprising', 'dramatic', 'incredible', 'unexpected', 'strange', 'intense'];\n  const engagementCount = words.filter(w => vividWords.includes(w.toLowerCase())).length;\n  const engagementScore = Math.min(100, 70 + engagementCount * 3);\n\n  document.getElementById('vocabulary-level').textContent = vocabLevel;\n  document.getElementById('sentence-structure').textContent = sentenceStructure;\n  document.getElementById('clarity-score').textContent = `${Math.round(clarityScore)}%`;\n  document.getElementById('engagement-score').textContent = `${engagementScore}%`;\n\n  document.getElementById('recommendations-container').innerHTML = `\n    <ul>\n      <li>Use more vivid and specific vocabulary.</li>\n      <li>Vary sentence structure for better rhythm.</li>\n      <li>Simplify long or complex sentences.</li>\n    </ul>\n  `;\n}\n\n\n//# sourceURL=webpack://cognito-extension/./sidebar.js?");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__["./sidebar.js"]();
/******/ 	
/******/ })()
;