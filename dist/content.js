/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./content.js":
/*!********************!*\
  !*** ./content.js ***!
  \********************/
/***/ (() => {

eval("// content.js\nlet sidebarFrame = null;\nlet sidebarVisible = false;\nlet lastText = \"\";\nlet canvasPollingInterval;\n\nconsole.log('[Cognito] Content script initialized');\n\nfunction createSidebar() {\n  if (sidebarFrame) return;\n\n  sidebarFrame = document.createElement('iframe');\n  sidebarFrame.src = chrome.runtime.getURL('sidebar.html');\n  sidebarFrame.id = 'cognito-sidebar';\n  sidebarFrame.style.cssText = `\n    position: fixed;\n    top: 0;\n    right: -350px;\n    width: 350px;\n    height: 100vh;\n    border: none;\n    z-index: 9999;\n    transition: right 0.3s ease;\n  `;\n  document.body.appendChild(sidebarFrame);\n}\n\nfunction toggleSidebar(activeTab = null) {\n  if (!sidebarFrame) createSidebar();\n\n  sidebarVisible = !sidebarVisible;\n  sidebarFrame.style.right = sidebarVisible ? '0' : '-350px';\n\n  const docsContent = document.querySelector('.docs-editor-container');\n  const docsEditor = document.querySelector('.docs-editor');\n  const docsContentWrapper = document.querySelector('.docs-content-wrapper');\n\n  [docsContent, docsEditor, docsContentWrapper].forEach(el => {\n    if (el) {\n      el.style.width = sidebarVisible ? 'calc(100% - 350px)' : '100%';\n      el.style.transition = 'width 0.3s ease';\n    }\n  });\n\n  if (sidebarVisible) {\n    setTimeout(() => startCanvasModePolling(), 1000);\n  } else {\n    clearInterval(canvasPollingInterval);\n  }\n\n  if (activeTab && sidebarVisible) {\n    setTimeout(() => {\n      if (sidebarFrame?.contentWindow) {\n        sidebarFrame.contentWindow.postMessage({ action: 'switchTab', tab: activeTab }, '*');\n      }\n    }, 300);\n  }\n}\n\nchrome.runtime.onMessage.addListener((request, sender, sendResponse) => {\n  if (request.action === 'toggleSidebar') {\n    toggleSidebar(request.tab);\n    sendResponse({ success: true });\n  } else if (request.action === 'fetchDocText') {\n    const text = getVisibleGoogleDocsText();\n    sendResponse({ success: true, text });\n  } else {\n    sendResponse({ success: false, error: 'Unknown action' });\n  }\n  return true;\n});\n\nwindow.addEventListener('message', (event) => {\n  if (event.source !== sidebarFrame?.contentWindow) return;\n  const { action, data } = event.data;\n\n  switch (action) {\n    case 'closeSidebar':\n      toggleSidebar();\n      break;\n    case 'uploadFiles':\n      handleFileUpload(data.files);\n      break;\n    case 'applyOutline':\n      applyOutlineToDoc(data.outline, data.cursor_position);\n      break;\n    case 'getCursorPosition':\n      const position = getCursorPosition();\n      sidebarFrame.contentWindow.postMessage({\n        action: 'cursorPosition',\n        position: position\n      }, '*');\n      break;\n  }\n});\n\nfunction handleFileUpload(files) {\n  console.log('[Cognito] Received files:', files);\n}\n\nfunction getCursorPosition() {\n  const selection = window.getSelection();\n  if (!selection.rangeCount) return null;\n  const range = selection.getRangeAt(0);\n  const rect = range.getBoundingClientRect();\n  return {\n    x: rect.left,\n    y: rect.top,\n    node: range.startContainer,\n    offset: range.startOffset\n  };\n}\n\nfunction applyOutlineToDoc(outline, cursorPosition) {\n  const doc = document.querySelector('div[contenteditable=\"true\"]');\n  if (!doc) return;\n\n  const outlineText = outline.sections.map((section, index) => {\n    const keyPoints = section.key_points.map((point, i) => `  ${i + 1}. ${point}`).join('\\n');\n    return `${index + 1}. ${section.title}\\n${keyPoints}`;\n  }).join('\\n\\n');\n\n  const outlineElement = document.createElement('div');\n  outlineElement.textContent = outlineText;\n\n  if (cursorPosition && cursorPosition.node) {\n    const range = document.createRange();\n    range.setStart(cursorPosition.node, cursorPosition.offset);\n    range.insertNode(outlineElement);\n  } else {\n    doc.insertBefore(outlineElement, doc.firstChild);\n  }\n}\n\nfunction getVisibleGoogleDocsText() {\n  const container = document.querySelector('.kix-appview');\n  if (!container) {\n    console.warn('[Cognito] No .kix-appview container found');\n    return '';\n  }\n\n  const walker = document.createTreeWalker(container, NodeFilter.SHOW_TEXT, {\n    acceptNode: (node) => {\n      const text = node.textContent.trim();\n      return text ? NodeFilter.FILTER_ACCEPT : NodeFilter.FILTER_REJECT;\n    }\n  });\n\n  let text = '';\n  while (walker.nextNode()) {\n    text += walker.currentNode.textContent + ' ';\n  }\n\n  text = text.replace(/\\s+/g, ' ').trim();\n  if (!text) console.warn('[Cognito] Still found no text in doc');\n  return text;\n}\n\n\nfunction startCanvasModePolling() {\n  clearInterval(canvasPollingInterval);\n\n  canvasPollingInterval = setInterval(() => {\n    const rawText = getVisibleGoogleDocsText();\n    const text = rawText.replace(/\\s+/g, ' ').trim();\n\n    // Always log (optional for debug)\n    console.log('[Cognito] Polling text:', text.slice(0, 100));\n\n    const wordCount = text.split(/\\s+/).length;\n    const readingTime = Math.ceil(wordCount / 200);\n\n    // Always send message, even if text is the same\n    if (sidebarFrame?.contentWindow) {\n      sidebarFrame.contentWindow.postMessage({\n        source: 'cognito-content',\n        action: 'liveTextUpdate',\n        data: text,\n        features: {\n          wordCount,\n          readingTime: `${readingTime} min`\n        }\n      }, '*');\n\n      console.log('[Cognito] Sent live text update');\n    }\n\n    // Save lastText if needed for fallback\n    lastText = text;\n  }, 2000);\n}\n\n\n\n//# sourceURL=webpack://cognito-extension/./content.js?");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__["./content.js"]();
/******/ 	
/******/ })()
;